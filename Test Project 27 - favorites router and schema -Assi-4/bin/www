#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('confusionserver:server');
var http = require('http');
var https= require('https');
var fs= require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/*
 why do I use this port+443? In a standard server, if your server is acting as a web server, your HTTP protocol will be running at port number 80 on your server. And the secure HTTP will run on port number 443.

Now you would normally not want to use those reserved ports in a development application but we are doing in this course. Instead, as you saw earlier, we had configured our port number to 3000 where our HTTP server is running. So I'm going to be running the HTTPS server, at port number 3443. So 3000 plus 443. So that's the reason why I am declaring this secure port. As port+443, so our HTTPS server will be running at port number 443. I will still be running the HTTP server at port 3000, we have already created the HTTP server here in the WWW, or rather, this is automatically generated by the express generator. Now, since the HTTP server is already configured, we are now going to configure the HTTPS server.

*/
app.set('secPort',port+443);



/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/*
Now the reason why I'm going to still run the HTTP server is that, if I get a request on the HTTP server's port then, that request will be redirected to the HTTPS server. So my server will only service request coming in on the HTTPS ports. But if by chance anybody accesses the server at the HTTP port, I will redirect that request to the HTTPS port
*/

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var options={
  key: fs.readFileSync(__dirname + '/private.key'),
  cert : fs.readFileSync(__dirname +'/certificate.pem')
};

var secureServer = https.createServer(options,app);

secureServer.listen(app.get('secPort'),()=>{
  console.log(`SECURE SERVER LISTENING ON PORT ${app.get('secPort')}`);
});

secureServer.on('error', onError);
secureServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
